{"backend_state":"init","connection_file":"/projects/616bebf1-83bb-4da8-a0be-bad824c72dfe/.local/share/jupyter/runtime/kernel-77779221-5ba9-4756-9531-c502d742af7d.json","kernel":"python3-ubuntu","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.10"}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":1,"id":"1e8c9e","input":"from glob import glob\nimgs_path = glob('data/BBBC010/*image.tif')\nlabels_path = glob('data/BBBC010/*labels.tif')\nimgs_path.sort()\nlabels_path.sort()","pos":2,"type":"cell"}
{"cell_type":"code","exec_count":11,"id":"ee3201","input":"import pandas as pd\n\npd_table = pd.DataFrame(table)\n\npd_table['alive']=alive\npd_table","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>mean_intensity</th>\n      <th>min_intensity</th>\n      <th>max_intensity</th>\n      <th>area</th>\n      <th>perimeter</th>\n      <th>convex_area</th>\n      <th>alive</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>178.891487</td>\n      <td>99.0</td>\n      <td>530.0</td>\n      <td>1069</td>\n      <td>286.232539</td>\n      <td>1202</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>104.943612</td>\n      <td>96.0</td>\n      <td>144.0</td>\n      <td>1135</td>\n      <td>271.178716</td>\n      <td>2824</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>146.833032</td>\n      <td>99.0</td>\n      <td>391.0</td>\n      <td>1108</td>\n      <td>279.320851</td>\n      <td>1319</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>136.290278</td>\n      <td>96.0</td>\n      <td>409.0</td>\n      <td>720</td>\n      <td>221.622366</td>\n      <td>1440</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>100.713489</td>\n      <td>91.0</td>\n      <td>122.0</td>\n      <td>897</td>\n      <td>257.137085</td>\n      <td>2013</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>108.642739</td>\n      <td>97.0</td>\n      <td>142.0</td>\n      <td>1212</td>\n      <td>283.379726</td>\n      <td>2381</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>113.843434</td>\n      <td>98.0</td>\n      <td>365.0</td>\n      <td>1188</td>\n      <td>283.421356</td>\n      <td>3299</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>105.877287</td>\n      <td>95.0</td>\n      <td>181.0</td>\n      <td>929</td>\n      <td>223.580736</td>\n      <td>1876</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>124.679558</td>\n      <td>100.0</td>\n      <td>255.0</td>\n      <td>1086</td>\n      <td>272.048773</td>\n      <td>1799</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>117.633475</td>\n      <td>93.0</td>\n      <td>335.0</td>\n      <td>944</td>\n      <td>265.078210</td>\n      <td>1853</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>102.395152</td>\n      <td>91.0</td>\n      <td>147.0</td>\n      <td>825</td>\n      <td>221.030483</td>\n      <td>1777</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>694.194245</td>\n      <td>112.0</td>\n      <td>2043.0</td>\n      <td>973</td>\n      <td>249.480231</td>\n      <td>1802</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>101.428169</td>\n      <td>93.0</td>\n      <td>126.0</td>\n      <td>1065</td>\n      <td>281.237590</td>\n      <td>2506</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>104.911017</td>\n      <td>91.0</td>\n      <td>183.0</td>\n      <td>944</td>\n      <td>246.007143</td>\n      <td>2524</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"    mean_intensity  min_intensity  max_intensity  area   perimeter  \\\n0       178.891487           99.0          530.0  1069  286.232539   \n1       104.943612           96.0          144.0  1135  271.178716   \n2       146.833032           99.0          391.0  1108  279.320851   \n3       136.290278           96.0          409.0   720  221.622366   \n4       100.713489           91.0          122.0   897  257.137085   \n5       108.642739           97.0          142.0  1212  283.379726   \n6       113.843434           98.0          365.0  1188  283.421356   \n7       105.877287           95.0          181.0   929  223.580736   \n8       124.679558          100.0          255.0  1086  272.048773   \n9       117.633475           93.0          335.0   944  265.078210   \n10      102.395152           91.0          147.0   825  221.030483   \n11      694.194245          112.0         2043.0   973  249.480231   \n12      101.428169           93.0          126.0  1065  281.237590   \n13      104.911017           91.0          183.0   944  246.007143   \n\n    convex_area  alive  \n0          1202      1  \n1          2824      1  \n2          1319      1  \n3          1440      1  \n4          2013      1  \n5          2381      1  \n6          3299      1  \n7          1876      1  \n8          1799      1  \n9          1853      1  \n10         1777      1  \n11         1802      1  \n12         2506      1  \n13         2524      1  "},"exec_count":11,"output_type":"execute_result"}},"pos":12,"type":"cell"}
{"cell_type":"code","exec_count":12,"id":"2fc9f9","input":"# the regionprops we want to calculate\nprops = ('mean_intensity', 'min_intensity', 'max_intensity', 'area', 'perimeter', 'convex_area')\n\n# create empty data frame\ndf = pd.DataFrame()\n\nfor (img_file, label_file) in zip(imgs_path, labels_path):\n\n    # TODO: load the images\n    image_1 = imread(img_file)\n    label_1 = imread(label_file)\n    # TODO: get well name & alive status\n    wellname =img_file.split('/')[2]\n    wellname = wellname[:-9]\n    alive = 1 if int(wellname[1:3]) < 13 else 0\n    # TODO: get regionprops and save as dataframe named dfi\n    table = regionprops_table(label_1, image_1, properties= props)\n    dfi = pd.DataFrame(table)\n    dfi['alive']=alive\n    # append to the dataframe of all wells\n#     df = df.append(dfi, ignore_index=True)\n    df = pd.concat([df, dfi], ignore_index=True)\n\n# show result\ndf","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>mean_intensity</th>\n      <th>min_intensity</th>\n      <th>max_intensity</th>\n      <th>area</th>\n      <th>perimeter</th>\n      <th>convex_area</th>\n      <th>alive</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>978.354223</td>\n      <td>123.0</td>\n      <td>2721.0</td>\n      <td>734</td>\n      <td>217.988853</td>\n      <td>1053</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>106.800169</td>\n      <td>96.0</td>\n      <td>149.0</td>\n      <td>1186</td>\n      <td>255.279221</td>\n      <td>1574</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>106.104536</td>\n      <td>93.0</td>\n      <td>190.0</td>\n      <td>1014</td>\n      <td>262.208153</td>\n      <td>2153</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>105.612323</td>\n      <td>95.0</td>\n      <td>122.0</td>\n      <td>779</td>\n      <td>209.965512</td>\n      <td>1251</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>103.976804</td>\n      <td>91.0</td>\n      <td>199.0</td>\n      <td>776</td>\n      <td>201.237590</td>\n      <td>1189</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>1302</th>\n      <td>117.633475</td>\n      <td>93.0</td>\n      <td>335.0</td>\n      <td>944</td>\n      <td>265.078210</td>\n      <td>1853</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1303</th>\n      <td>102.395152</td>\n      <td>91.0</td>\n      <td>147.0</td>\n      <td>825</td>\n      <td>221.030483</td>\n      <td>1777</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1304</th>\n      <td>694.194245</td>\n      <td>112.0</td>\n      <td>2043.0</td>\n      <td>973</td>\n      <td>249.480231</td>\n      <td>1802</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1305</th>\n      <td>101.428169</td>\n      <td>93.0</td>\n      <td>126.0</td>\n      <td>1065</td>\n      <td>281.237590</td>\n      <td>2506</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1306</th>\n      <td>104.911017</td>\n      <td>91.0</td>\n      <td>183.0</td>\n      <td>944</td>\n      <td>246.007143</td>\n      <td>2524</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n<p>1307 rows Ã— 7 columns</p>\n</div>","text/plain":"      mean_intensity  min_intensity  max_intensity  area   perimeter  \\\n0         978.354223          123.0         2721.0   734  217.988853   \n1         106.800169           96.0          149.0  1186  255.279221   \n2         106.104536           93.0          190.0  1014  262.208153   \n3         105.612323           95.0          122.0   779  209.965512   \n4         103.976804           91.0          199.0   776  201.237590   \n...              ...            ...            ...   ...         ...   \n1302      117.633475           93.0          335.0   944  265.078210   \n1303      102.395152           91.0          147.0   825  221.030483   \n1304      694.194245          112.0         2043.0   973  249.480231   \n1305      101.428169           93.0          126.0  1065  281.237590   \n1306      104.911017           91.0          183.0   944  246.007143   \n\n      convex_area  alive  \n0            1053      1  \n1            1574      1  \n2            2153      1  \n3            1251      1  \n4            1189      1  \n...           ...    ...  \n1302         1853      1  \n1303         1777      1  \n1304         1802      1  \n1305         2506      1  \n1306         2524      1  \n\n[1307 rows x 7 columns]"},"exec_count":12,"output_type":"execute_result"}},"pos":14,"type":"cell"}
{"cell_type":"code","exec_count":17,"id":"3270a5","input":"from sklearn.model_selection import train_test_split\n\nfull_x = x\nfull_y = y\n\ntrain_X, test_X, train_Y, test_Y = train_test_split(full_x, full_y, train_size=0.85)","pos":26,"type":"cell"}
{"cell_type":"code","exec_count":19,"id":"51e6d3","input":"from sklearn import tree\n\nclf = tree.DecisionTreeClassifier()\nclf = clf.fit(train_X, train_Y)\npred = clf.predict(test_X)\npred\nclf.score(test_X, test_Y)\n\nfrom sklearn.tree import plot_tree\n\nfig, ax = plt.subplots(figsize=(15, 15))\nplot_tree(clf, max_depth=2, feature_names=df.columns, class_names=['dead', 'alive'], ax=ax, fontsize=12);","output":{"0":{"data":{"image/png":"202808a96874952906d6f8386bebba44d4d9c4cf","text/plain":"<Figure size 1080x1080 with 1 Axes>"},"exec_count":19,"metadata":{"image/png":{"height":829,"width":851},"needs_background":"light"},"output_type":"execute_result"}},"pos":28,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"0e01d8","input":"from skimage.io import imread\nfrom matplotlib import pyplot as plt\n\nimage_1 = imread(imgs_path[0])\nlabel_1 = imread(labels_path[0])\n\nfig, axs = plt.subplots(ncols=2)\naxs[0].imshow(image_1)\naxs[1].imshow(label_1)","output":{"0":{"data":{"text/plain":"<matplotlib.image.AxesImage at 0x7fcd71265df0>"},"exec_count":2,"output_type":"execute_result"},"1":{"data":{"image/png":"fc760f9bcf4da7cfe6aabd887e8aeaef1670c549","text/plain":"<Figure size 864x504 with 2 Axes>"},"exec_count":2,"metadata":{"image/png":{"height":261,"width":710},"needs_background":"light"},"output_type":"execute_result"}},"pos":4,"type":"cell"}
{"cell_type":"code","exec_count":20,"id":"da0d0d","input":"from sklearn.cluster import KMeans\n\n\nkmeans = KMeans(n_clusters=2)\n\nclusters = kmeans.fit_predict(new_data)\n\nprint(\"Error: \", min(np.mean(np.abs(y- clusters)), 1-np.mean(np.abs(y - clusters))))\n\n# plot 1: color by predicted clusters\n# fig = plt.figure()\n# ax = Axes3D(fig)\nplt.scatter(new_data[:,0], new_data[:,1], c=clusters)\n# ax.set_xlabel('PCA component 1')\nplt.xlabel('PCA component 1')\n# ax.set_ylabel('PCA component 2')\nplt.ylabel('PCA component 2')\nplt.show()\n","output":{"0":{"name":"stdout","output_type":"stream","text":"Error:  0.09334353481254781\n"},"1":{"data":{"image/png":"ff1bb2fef8d0c66011e9833f48feeda999cb2997","text/plain":"<Figure size 864x504 with 1 Axes>"},"exec_count":20,"metadata":{"image/png":{"height":424,"width":719},"needs_background":"light"},"output_type":"execute_result"}},"pos":22,"type":"cell"}
{"cell_type":"code","exec_count":21,"id":"6a2ccb","input":"from sklearn.decomposition import PCA\n\n# PCA is a class and not a function, we have to create an object that we can use.\npca = PCA()\n\nnew_data = pca.fit_transform(x)\n\n#plt.plot(pca.explained_variance_ratio_[:10]);\nfrom sklearn.cluster import KMeans\n\n\nkmeans = KMeans(n_clusters=2)\n\nclusters = kmeans.fit_predict(new_data)\n\nprint(\"Error: \", min(np.mean(np.abs(y- clusters)), 1-np.mean(np.abs(y - clusters))))\n\n# plot 1: color by predicted clusters\n# fig = plt.figure()\n# ax = Axes3D(fig)\nplt.scatter(new_data[:,0], new_data[:,1])\n# ax.set_xlabel('PCA component 1')\nplt.xlabel('PCA component 1')\n# ax.set_ylabel('PCA component 2')\nplt.ylabel('PCA component 2')\nplt.show()\n\n\n","output":{"0":{"name":"stdout","output_type":"stream","text":"Error:  0.09334353481254781\n"},"1":{"data":{"image/png":"181bede83de9e0ca5f46a0d3424d3ddee4648ec9","text/plain":"<Figure size 864x504 with 1 Axes>"},"exec_count":21,"metadata":{"image/png":{"height":424,"width":719},"needs_background":"light"},"output_type":"execute_result"}},"pos":20,"type":"cell"}
{"cell_type":"code","exec_count":22,"id":"655167","input":"from sklearn.cluster import KMeans\n\n\nkmeans = KMeans(n_clusters=2)\n\nclusters = kmeans.fit_predict(new_data)\n\nprint(\"Error: \", min(np.mean(np.abs(y- clusters)), 1-np.mean(np.abs(y - clusters))))\n\n# plot 1: color by predicted clusters\n# fig = plt.figure()\n# ax = Axes3D(fig)\nplt.scatter(new_data[:,0], new_data[:,1], c=y)\n# ax.set_xlabel('PCA component 1')\nplt.xlabel('PCA component 1')\n# ax.set_ylabel('PCA component 2')\nplt.ylabel('PCA component 2')\nplt.show()\n\n","output":{"0":{"name":"stdout","output_type":"stream","text":"Error:  0.09334353481254781\n"},"1":{"data":{"image/png":"c44a9e5dfbeaa360818e5371ec3e1662f81179d4","text/plain":"<Figure size 864x504 with 1 Axes>"},"exec_count":22,"metadata":{"image/png":{"height":424,"width":719},"needs_background":"light"},"output_type":"execute_result"}},"pos":24,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"7c0881","input":"wellname =imgs_path[0].split('/')[2]\nwellname = wellname[:-9]\nwellname","output":{"0":{"data":{"text/plain":"'A01'"},"exec_count":3,"output_type":"execute_result"}},"pos":6,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"ce619c","input":"alive = 1 if int(wellname[1:3]) < 13 else 0\nalive","output":{"0":{"data":{"text/plain":"1"},"exec_count":4,"output_type":"execute_result"}},"pos":8,"type":"cell"}
{"cell_type":"code","exec_count":5,"id":"cb12b0","input":"from skimage.measure import regionprops_table\n\nprops = ('mean_intensity', 'min_intensity', 'max_intensity', 'area', 'perimeter', 'convex_area')\ntable = regionprops_table(label_1, image_1, properties= props)\n\ntable","output":{"0":{"data":{"text/plain":"{'mean_intensity': array([978.35422343, 106.80016863, 106.10453649, 105.61232349,\n        103.97680412, 349.90151515, 124.53592073, 152.71549534,\n        107.94043624, 133.66886326, 104.9416826 , 108.33656644,\n        104.82936508, 111.99123905]),\n 'min_intensity': array([123.,  96.,  93.,  95.,  91.,  97.,  97.,  96.,  95.,  96.,  94.,\n         97.,  94.,  93.]),\n 'max_intensity': array([2721.,  149.,  190.,  122.,  199., 2717.,  321.,  388.,  167.,\n         221.,  160.,  180.,  129.,  178.]),\n 'area': array([ 734, 1186, 1014,  779,  776, 1056, 1211, 1181, 1192, 1214, 1046,\n        1031, 1008,  799]),\n 'perimeter': array([217.98885271, 255.27922061, 262.2081528 , 209.96551211,\n        201.23759005, 274.91168825, 291.63455967, 287.50461736,\n        251.85281374, 288.71782079, 242.16652224, 224.06601718,\n        243.80613255, 205.75840533]),\n 'convex_area': array([1053, 1574, 2153, 1251, 1189, 1342, 1348, 1496, 2137, 1625, 2239,\n        1988, 2272, 1092])}"},"exec_count":5,"output_type":"execute_result"}},"pos":10,"type":"cell"}
{"cell_type":"code","exec_count":8,"id":"1d0ebf","input":"import numpy as np\n\ny = np.asarray(df['alive'])\n\nx = np.asarray(df.iloc[:,[0,1,2,3,4,5]])\n","pos":16,"type":"cell"}
{"cell_type":"code","exec_count":9,"id":"fca714","input":"from sklearn.preprocessing import scale\n\nx = scale(x)\nx","output":{"0":{"data":{"text/plain":"array([[ 1.98363963,  0.9632074 ,  1.50835946, -1.79032554, -1.59498201,\n        -0.9833755 ],\n       [-0.7402133 , -0.65177934, -0.88460715,  1.34286879, -0.11211683,\n        -0.02734379],\n       [-0.74238735, -0.83122231, -0.8464611 ,  0.1505913 ,  0.16341471,\n         1.03511755],\n       ...,\n       [ 1.09555933,  0.30524984,  0.87755411, -0.13361438, -0.34271579,\n         0.39103477],\n       [-0.75700232, -0.83122231, -0.90600615,  0.50411544,  0.92012727,\n         1.68287032],\n       [-0.74611743, -0.95085096, -0.85297384, -0.33463791, -0.48082441,\n         1.71590021]])"},"exec_count":9,"output_type":"execute_result"}},"pos":18,"type":"cell"}
{"cell_type":"markdown","id":"030d4e","input":"Use principal component analysis to display the features in 2D\n\n","pos":19,"type":"cell"}
{"cell_type":"markdown","id":"146183","input":"Now, color the points according to the true *dead/alive* information in ```y```:","pos":23,"type":"cell"}
{"cell_type":"markdown","id":"264ea8","input":"Use ```regionprops_table``` to generate a table of region properties with the properties defined in ```props```\n\n","pos":9,"type":"cell"}
{"cell_type":"markdown","id":"2a4307","input":"read the first files in ```img_files``` and ```label_files``` and display them:","pos":3,"type":"cell"}
{"cell_type":"markdown","id":"63ad62","input":"Cluster the data points using KMeans, color the points in your plot according to the output of KMeans","pos":21,"type":"cell"}
{"cell_type":"markdown","id":"6943bf","input":"Normalize ```X```","pos":17,"type":"cell"}
{"cell_type":"markdown","id":"6dc343","input":"Extract the well name (e.g. A01) from the filename. Note: use the ```.split('/')``` method to split the filename at slashes.\n\n","pos":5,"type":"cell"}
{"cell_type":"markdown","id":"6f3fbd","input":"Use ```glob``` to create lists ```img_files``` and ```label_files``` containing the paths of image and label files respectively. Make sure the lists are sorted!","pos":1,"type":"cell"}
{"cell_type":"markdown","id":"8dbf33","input":"Convert the 'alive' column to a numpy array called ```y```\n\nConvert all other columns to a numpy array called ```X```","pos":15,"type":"cell"}
{"cell_type":"markdown","id":"a5c100","input":"Create a supervised classification model (e.g. Decision Tree), fit it on the train data and score it on the test data:\n\n**Optional:** if you built a decision tree model, plot the tree and see what features (if any) are most helpful in differentiating dead and alive worms","pos":27,"type":"cell"}
{"cell_type":"markdown","id":"ab6c87","input":"## Task: *C. elegans* dead/live classification\n\nFor an example of how we can use images to create input for ML-based analyses, we will revisit the *C. elegans* data from day 4.\nThis dataset (https://bbbc.broadinstitute.org/BBBC010) is a multiwell experiment of *C. elegans* exposed to microbial pathogens. Worms in well columns 1-12 were treated with antibiotics and should be mostly **alive**, Worms in columns 13-24 were not given antibiotics and should mostly be **dead**\n\nThe directory ```data/BBBC010/``` will contain 2 files for each well that was imaged:\n* ```data/BBBC010/{well_name}image.tif``` : GFP-channel image of the well\n* ```data/BBBC010/{well_name}labels.tif``` : outlines of the individual worms","pos":0,"type":"cell"}
{"cell_type":"markdown","id":"b1d939","input":"Create a variable ```alive``` depending on the column of the well. Alive should be 1 for column indices < 13 and 0 otherwise","pos":7,"type":"cell"}
{"cell_type":"markdown","id":"b83563","input":"For training and testing a supervised learning model, we can use the ```train_test_split``` to split ```X``` and ```y``` into a training and test set (85-15%).\n\nSet the variables ```full_x``` and ```full_y``` to your normalized features and dead/alive classification:","pos":25,"type":"cell"}
{"cell_type":"markdown","id":"c1e46f","input":"Create a Pandas DataFrame from the output\n\nAdd the 'alive' value as a column","pos":11,"type":"cell"}
{"cell_type":"markdown","id":"f0222d","input":"Now create a table of region properties for all wells.\n\nThe loop below goes over all pairs of ```(img_file, label_file)``` using the ```zip()``` function.\n\nYou should be able to use your solutions from above with minor modifications.","pos":13,"type":"cell"}
{"id":0,"time":1685651086350,"type":"user"}
{"last_load":1685704509114,"type":"file"}